---
export interface Props {
  src: string;
  title?: string;
  height?: string;
  className?: string;
  scale?: string;
}

const { src, title = "PDF Document", className = "", scale = 1 } = Astro.props;

// UniqueID for each PDF Viewer instance
const uniqueId = crypto.randomUUID();

// UniqueID appended IDs
const canvasId = `canvas-${uniqueId}`;
const prevBtnId = `prev-btn-${uniqueId}`;
const nextBtnId = `next-btn-${uniqueId}`;
const pageCountId = `page-count-${uniqueId}`;
const pageNumId = `page-num-${uniqueId}`;

// Scale parsed to integer
const scaleNum = Number(scale);
---

<h1>{title}</h1>

<canvas class={className} id={canvasId}></canvas>

<div>
  <button id={prevBtnId}>Previous</button>

  <span
    >Page: <span id={pageNumId}></span> / <span id={pageCountId}></span></span
  >
  <button
    class="btn btn-md px-10 py-6 text-[1.01rem] btn-primary"
    id={nextBtnId}>Next</button
  >
</div>

<script
  is:inline
  src="https://unpkg.com/pdfjs-dist@4.0.269/build/pdf.min.mjs"
  type="module"></script>

<script
  define:vars={{
    canvasId,
    prevBtnId,
    nextBtnId,
    pageCountId,
    pageNumId,
    src,
    scaleNum,
  }}
  type="module"
  is:inline
>
  const url = src;

  // Loaded via <script> tag, create shortcut to access PDF.js exports.
  const { pdfjsLib } = globalThis;

  // The workerSrc property shall be specified. For some weird reason it objects if we don't add the backslashes, so it's added here.
  pdfjsLib.GlobalWorkerOptions.workerSrc =
    "//unpkg.com/pdfjs-dist@4.0.269/build/pdf.worker.min.mjs";

  var pdfDoc = null,
    pageNum = 1,
    pageRendering = false,
    pageNumPending = null,
    scale = scaleNum,
    canvas = document.getElementById(canvasId),
    ctx = canvas.getContext("2d");

  /**
   * Get page info from document, resize canvas accordingly, and render page.
   * @param num Page number.
   */
  function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function (page) {
      var viewport = page.getViewport({ scale: scale });
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport,
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(function () {
        pageRendering = false;
        if (pageNumPending !== null) {
          // New page rendering is pending
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });

    // Update page counters
    document.getElementById(pageNumId).textContent = num;
  }

  /**
   * If another page rendering in progress, waits until the rendering is
   * finised. Otherwise, executes rendering immediately.
   */
  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }

  /**
   * Displays previous page.
   */
  function onPrevPage() {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  }
  document.getElementById(prevBtnId).addEventListener("click", onPrevPage);

  /**
   * Displays next page.
   */
  function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  }
  document.getElementById(nextBtnId).addEventListener("click", onNextPage);

  /**
   * Asynchronously downloads PDF.
   */
  pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
    pdfDoc = pdfDoc_;
    document.getElementById(pageCountId).textContent = pdfDoc.numPages;

    // Initial/first page rendering
    renderPage(pageNum);
  });
</script>
